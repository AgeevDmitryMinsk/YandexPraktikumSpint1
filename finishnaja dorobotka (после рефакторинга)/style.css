.page {
    /*Сделаем шрифт помоднее. Установите странице шрифт 'Cormorant Garamond'. Для этого задайте свойство font-family для элемента body*/
    font-family: 'Cormorant Garamond';
}

.header {
    display: flex;
    /*Сделайте блок header флекс-контейнером*/
    height: 95px;
    /*Задайте блоку с классом header высоту 95 пикселей.*/

    /*А сейчас вернём макет в менее адаптивный, но более привлекательный вид.*/
    max-width: 1330px;
    min-width: 1280px;
    margin: auto;
}

.menu {
    display: flex;
    /*Сделайте меню флекс-контейнером. */
    justify-content: center;
    /*Затем задайте ему свойство justify-content со значением center.*/
    min-height: 75px;
    /*Задайте меню минимальную высоту 75 пикселей. Обратите внимание: свойство justify-content 
                        отцентровало элементы меню только по горизонтали. По вертикали они остались прижаты к верхней границе.
                        Частая ошибка — задавать свойство height вместо min-height. Мы устанавливаем именно минимальную высоту, 
                        чтобы контейнер растягивался, когда ссылки встанут в колонку: например, на телефоне.
                        Запомните этот приём с min-height. Прежде чем установить элементу фиксированную высоту, 
                        задайте себе вопрос: «Что если контента станет больше?».*/
    align-items: center;
    /*Добавьте элементу с классом menu свойство align-items со значением center
                        Теперь элементы выравнены и по вертикали и по горизонтали по центру*/
    flex-wrap: wrap;
    /*свойство, чтобы элементы переносились на новую строку при сжатии экрана, т.е. ссылки будут переносится на второя ряд. 
                    Именно для этого устанваливат минимальнцю высоту, а не фиксированную*/
    /*А сейчас вернём макет в менее адаптивный, но более привлекательный вид.*/

    max-width: 1330px;
    /*А сейчас вернём макет в менее адаптивный, но более привлекательный вид.*/
    min-width: 1280px;
    margin: 60px auto; /*Добавим внешние отступы сверху и снизу по 40px */
}

.content {
    /* А сейчас вернём макет в менее адаптивный, но более привлекательный вид.*/
    max-width: 1330px;
    min-width: 1280px;
    margin: auto;
}

.flex-row {
    /*Превратите элемент с классом flex-row во флекс-контейнер. Затем поменяйте мышкой размеры окна просмотра.
                    Изображения растягиваются и сжимаются, адаптируясь к новым условиям. Они продолжают заполнять собой весь флекс-контейнер.*/
    display: flex;
    /*justify-content: space-around; /*Пустое пространство перед первым и после последнего элементов равно половине пространства между двумя соседними элементами*/
    /*между обложками и рамкой видны узкие белые щели при justify-content: space-around.
                                     Чтобы избавиться от них,  прижмите элементы флекс-строки к краям родителя. Для этого*/
    justify-content: space-between;
    /* заменим justify-content: space-around на justify-content: space-between;*/
    flex-wrap: wrap;
    /*У флекс-контейнера flex-row со свойством wrap последние элементы заворачиваются (переходят) на новую строчку, 
                    если не умещаются на текущей/если свернуть экран браузера.*/

    
}

    /*В селекторе блока flex-row намешаны стили для флекс-строки и стили для списка.
     Это не хорошо и не по БЭМ. Исправим это. Перенесем в элемент с классом "list": */
.list {
    list-style: none; /*list-style: none - свойство, которое уберёт точки у списка*/
    padding: 0; /*делает все внутренние отступы = 0 */
    margin: 0; /*делает все внешние отступы = 0 */

}

/*Уберём красные границы. Они были нужны нам, чтобы видеть, как работают флекс-свойства. Но поскольку менять эти свойства мы больше не будем, красные границы можно убирать.*/
/*div { /* будущий флекс-контейнер, задайте ему контур. Для этого установите всем блокам div рамку в 1 пиксель, сплошную, красного цвета.*/
    /*border: 1px solid red;
}*/

.header__link {
    margin: auto;
    /* ссылку с классом header-link выровняйте по центру этого контейнера. Для этого задайте ей поля выражением margin: auto;*/
    font-size: 28px;
    /*размер шрифта */
    text-decoration: none;
    /* убираем подчеркивание ссылки, т.к. по умолчанию ссылка подчеркивается, а это не очень некрасиво */
    color: #10191E;
    /*цвет текста*/
}

.menu__link {
    font-size: 18px;
    /*размер шрифта */
    margin-right: 20px;
    /*внешний правый отступ 20 пикселей.*/
    text-decoration: none;
    /* убираем подчеркивание ссылки, т.к. по умолчанию ссылка подчеркивается, а это не очень некрасиво */
    color: #10191E;
    /*цвет текста*/
}

.menu__link_active {
    text-decoration: underline; /*назначьте модификатору подчёркивание в CSS*/
}

.project {
    background: center;
    /*установите позицию фона в центре по горизонтали и вертикали;*/
    background-size: cover;
    /* установите такой размер изображения, чтобы покрывало весь блок.*/
}


.project_width_l { /*Создайте модификаторы для ширины и запишите нужным карточкам в HTML.
    Модификатор блока project с ключом width и значением l (large) — карточкам с шириной 636 пикселей*/
width: 636px;
}

.project_width_m {  /*Модификатор блока project с ключом width и значением m — карточкам с шириной 306 пикселей.*/
    width: 306px;
    }

.project_height_xl { /*Модификатор блока project с ключом height и значением xl — карточкам с высотой 557 пикселей.*/
    height: 557px;
}

.project_height_l {
    height: 430px;
}

.project_height_m {
    height: 290px;
}

.project_height_s {
    height: 240px;
}

.project_name_music-album {
    /* зададим фон: */
    background-image: url(https://code.s3.yandex.net/web-code/album.png);
}

.project_name_design-principles {
    background-image: url(https://code.s3.yandex.net/web-code/design.png);
}

.flex-column {
    /*Сделайте элемент с классом flex-column флекс-контейнером.*/
    display: flex;
    /*width: 636px; -перенес в модификатор .project_width_l**/
    /*height: 557px;*/
    justify-content: space-between;
}


.project__video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    /*Свойство object-fit подстроит элемент под размер так, чтобы он закрывал определенную площадь.
                         Её задают параметрами width и height. Их нужно указать явно, в нашем случае — это 100% ширины и высоты родителя.*/
}


.project_name_slider {
    background-image: url(https://code.s3.yandex.net/web-code/slider.gif);
    /*width: 306px; - перенес в модификатор .project_width_m*/
    /*height: 290px; - перенос в модификатор project_height_m */
}

.project_name_reactive {
    background-image: url(https://code.s3.yandex.net/web-code/reactive.gif);
    /*width: 306px; - перенес в модификатор .project_width_m*/
    /*height: 290px; - - перенос в модификатор project_height_m */
}

.flex-row_reversed {
    /*для этого класса CSS-правило, которое разместит элементы в строке в противоположном направлении.*/
    flex-direction: row-reverse;
    margin: 60px auto; /*Добавим внешние отступы сверху и снизу по 60px */
}

.flex-column_reversed {
    flex-direction: column-reverse;
    }


.project_name_how-to-study {
    /*Каждому классу определите свойство background-image. Всавьте ссылки на фоновые изображения для каждого блока*/
    background-image: url(https://code.s3.yandex.net/web-code/how-to-study.png);

    /* Присвойте блокам с классами 
        значения свойства order, чтобы первый и последний блоки поменялись местами.*/
    order: 3;
}

.project_name_across-russia {
    background-image: url(https://code.s3.yandex.net/web-code/across-russia.png);
    order: 2;
    /*flex-basis: 636px;
    /*ширина блока изменилась от 100 до 636px относитьно соседних двух контейнеров*/
}

.project_name_mesto {
    background-image: url(https://code.s3.yandex.net/web-code/mesto.png);
    order: 1;
    /* свойство order меняет местами классы, сейчас последний класс на экране стал первым */
}

.footer {
    display: flex;
    height: 95px;
    justify-content: center;
    /*вложенные в подвал элементы отцентруйте вдоль оси флексбокс-контейнера*/

    max-width: 1330px;
    /*А сейчас вернём макет в менее адаптивный, но более привлекательный вид.*/
    min-width: 1280px;
    margin: auto;
}


/*Блок logo нельзя использовать в другом контексте. Поэтому сделайте его элементом logo блока footer.*/
.footer__logo {
    width: 145px;
    height: 25px;
    background-image: url(https://pictures.s3.yandex.net/logo_black.png);
    background-size: contain;
    /*размер фона contain;*/
    background-repeat: no-repeat;
    /*повтор фона no-repeat;*/
    background-position: center;
    /*позицию фона center.*/
    align-self: center;
    /*Выровняем элемент  по центру и по вертикали - это третий способ.
                        есть еще способ центрирования: margin: auto; и еще один: justify-content: center;*/
    ;
}